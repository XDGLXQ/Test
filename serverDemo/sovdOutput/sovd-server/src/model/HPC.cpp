/**
 * 
 * 
 *
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/HPC.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



HPC::HPC()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Os = utility::conversions::to_string_t("");
    m_OsIsSet = false;
    m_ApplicationsIsSet = false;
}

HPC::~HPC()
{
}

void HPC::validate()
{
    // TODO: implement validation
}

web::json::value HPC::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_OsIsSet)
    {
        val[utility::conversions::to_string_t(U("os"))] = ModelBase::toJson(m_Os);
    }
    if(m_ApplicationsIsSet)
    {
        val[utility::conversions::to_string_t(U("applications"))] = ModelBase::toJson(m_Applications);
    }

    return val;
}

bool HPC::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("os"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("os")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOs);
            setOs(refVal_setOs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("applications"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("applications")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setApplications;
            ok &= ModelBase::fromJson(fieldValue, refVal_setApplications);
            setApplications(refVal_setApplications);
        }
    }
    return ok;
}

void HPC::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_OsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("os")), m_Os));
    }
    if(m_ApplicationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("applications")), m_Applications));
    }
}

bool HPC::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("os"))))
    {
        utility::string_t refVal_setOs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("os"))), refVal_setOs );
        setOs(refVal_setOs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("applications"))))
    {
        std::vector<utility::string_t> refVal_setApplications;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("applications"))), refVal_setApplications );
        setApplications(refVal_setApplications);
    }
    return ok;
}

utility::string_t HPC::getId() const
{
    return m_Id;
}

void HPC::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool HPC::idIsSet() const
{
    return m_IdIsSet;
}

void HPC::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t HPC::getName() const
{
    return m_Name;
}

void HPC::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool HPC::nameIsSet() const
{
    return m_NameIsSet;
}

void HPC::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t HPC::getOs() const
{
    return m_Os;
}

void HPC::setOs(const utility::string_t& value)
{
    m_Os = value;
    m_OsIsSet = true;
}

bool HPC::osIsSet() const
{
    return m_OsIsSet;
}

void HPC::unsetOs()
{
    m_OsIsSet = false;
}
std::vector<utility::string_t>& HPC::getApplications()
{
    return m_Applications;
}

void HPC::setApplications(const std::vector<utility::string_t>& value)
{
    m_Applications = value;
    m_ApplicationsIsSet = true;
}

bool HPC::applicationsIsSet() const
{
    return m_ApplicationsIsSet;
}

void HPC::unsetApplications()
{
    m_ApplicationsIsSet = false;
}
}
}
}
}


